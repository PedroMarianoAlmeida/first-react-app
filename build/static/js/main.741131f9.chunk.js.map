{"version":3,"sources":["utils.js","Home.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","Error","json","Movie","props","movie","Title","Year","imdbID","Type","Poster","className","to","src","MovieFinder","state","searchTerm","results","error","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","trim","fetch","then","data","Response","Search","console","log","catch","message","onSubmit","type","placeholder","onChange","map","key","React","Component","match","params","id","Plot","Director","imdbRating","NotFound","App","path","exact","component","Home","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.741131f9.chunk.js","sourcesContent":["export const checkStatus = (response) => {\r\n    if (response.ok) {\r\n      // .ok returns true if response status is 200-299\r\n      return response;\r\n    }\r\n    throw new Error('Request was either a 404 or 500');\r\n  }\r\n  export const json = (response) => response.json()","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { json, checkStatus } from './utils';\r\nconst Movie = (props) => {\r\n  const {\r\n    Title,\r\n    Year,\r\n    imdbID,\r\n    Type,\r\n    Poster,\r\n  } = props.movie;\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-4 col-md-2 col-lg-1 mb-3\">\r\n        <Link to={`/movie/${imdbID}/`}>\r\n          <img src={Poster} className=\"img-fluid\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"col-8 col-md-10 col-lg-11 mb-3\">\r\n        <Link to={`/movie/${imdbID}/`}>\r\n          <h4>{Title}</h4>\r\n          <p>{Type} | {Year}</p>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nclass MovieFinder extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: '',\r\n      results: [],\r\n      error: '',\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ searchTerm: event.target.value });\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    let { searchTerm } = this.state;\r\n    searchTerm = searchTerm.trim();\r\n    if (!searchTerm) {\r\n      return;\r\n    }\r\n    fetch(`https://www.omdbapi.com/?s=${searchTerm}&apikey=b7da8d63`)\r\n      .then(checkStatus)\r\n      .then(json)\r\n      .then((data) => {\r\n        if (data.Response === 'False') {\r\n          throw new Error(data.Error);\r\n        }\r\n        if (data.Response === 'True' && data.Search) {\r\n          console.log(data);\r\n          this.setState({ results: data.Search, error: '' });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ error: error.message });\r\n        console.log(error);\r\n      })\r\n  }\r\n  render() {\r\n    const { searchTerm, results, error } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <form onSubmit={this.handleSubmit} className=\"form-inline my-4\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control mr-sm-2\"\r\n                placeholder=\"frozen\"\r\n                value={searchTerm}\r\n                onChange={this.handleChange}\r\n              />\r\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n            {(() => {\r\n              if (error) {\r\n                return error;\r\n              }\r\n              return results.map((movie) => {\r\n                return <Movie key={movie.imdbID} movie={movie} />;\r\n              })\r\n            })()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MovieFinder;","import React from 'react';\r\nimport { json, checkStatus } from './utils';\r\nclass Movie extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movie: null,\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    fetch(`https://www.omdbapi.com/?i=${this.props.match.params.id}&apikey=b7da8d63`)\r\n      .then(checkStatus)\r\n      .then(json)\r\n      .then((data) => {\r\n        if (data.Response === 'False') {\r\n          throw new Error(data.Error);\r\n        }\r\n        if (data.Response === 'True') {\r\n          console.log(data);\r\n          this.setState({ movie: data, error: '' });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ error: error.message });\r\n        console.log(error);\r\n      })\r\n  }\r\n  render() {\r\n    if (!this.state.movie) {\r\n      return null;\r\n    }\r\n    const {\r\n      Title,\r\n      Year,\r\n      Plot,\r\n      Director,\r\n      imdbRating,\r\n      Poster,\r\n    } = this.state.movie;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row pt-5\">\r\n          <div className=\"col-6\">\r\n            <h1>{Title}</h1>\r\n            <ul className=\"list-unstyled\">\r\n              <li>\r\n                <p>Year: {Year}</p>\r\n              </li>\r\n              <li>\r\n                <p>Director: {Director}</p>\r\n              </li>\r\n              <li>\r\n                <p>Plot: {Plot}</p>\r\n              </li>\r\n              <li>\r\n                <p>imdbRating: {imdbRating} / 10</p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <img src={Poster} className=\"img-fluid\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Movie;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport Home from './Home';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nconst NotFound = () => {\r\n  return <h2>404 Not Found</h2>;\r\n}\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <Link className=\"navbar-brand\" to=\"/\">Movie Finder 2</Link>\r\n      </nav>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/movie/:id\" component={Movie} />\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}